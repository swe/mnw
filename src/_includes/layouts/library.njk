<!DOCTYPE html>
<html lang="{{ lang or 'en' }}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <meta name="description" content="{{ description or site.description[lang] or site.description.en }}">
    <meta name="author" content="{{ site.author }}">

    {% for langCode, langData in site.languages %}
    <link rel="alternate" hreflang="{{ langCode }}" href="{{ site.url }}{{ page.url | switchLang(lang, langCode) }}">
    {% endfor %}

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tinos:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">

    <link rel="stylesheet" href="/assets/css/style.css">
    <link rel="icon" type="image/x-icon" href="/assets/favicon.ico">
</head>
<body>
    <!-- Top header with site title and language switcher -->
    <div class="top-header">
        <a href="{% if lang == 'sv' %}/sv/{% elif lang == 'fr' %}/fr/{% else %}/{% endif %}" class="site-title-link">IVÁN A. — SECURITY ENGINEER</a>
        <!-- <div class="home-lang-switcher">
            {% for langCode, langData in site.languages %}
                {% if langCode == (lang or 'en') %}
                    <span class="home-lang-current">{{ langData.flag }}</span>
                {% else %}
                    <a href="{{ page.url | switchLang(lang, langCode) }}"
                       class="home-lang-link"
                       title="Switch to {{ langData.name }}">
                        {{ langData.flag }}
                    </a>
                {% endif %}
            {% endfor %}
        </div> -->
    </div>

    <main id="main" class="main-content">
        <div class="library-container">
            <!-- Library Header -->
            <header class="library-header">
                <h1>Library</h1>
            </header>

            <!-- Get books from collection -->
            {% set books = collections.library %}

            <!-- Debug: Show what we found -->
            <!-- Debug info (remove in production):
                 Collections available: {{ collections | keys | join(', ') }}
                 Library collection exists: {{ 'library' in collections }}
                 Number of books: {{ books | length if books else 'undefined' }}
            -->

            {% set uniqueCategories = books | getUniqueCategories if books else [] %}
            {% set topCategories = books | getTopCategories(3) if books else [] %}

            <!-- Category Filter Pills -->
            <div class="library-filters">
                <button class="filter-pill filter-pill--active" data-category="all">All</button>

                <!-- Create filter buttons for all categories -->
                {% for category in uniqueCategories %}
                    {% set categorySlug = category | categorySlug %}
                    {% set isTopCategory = false %}
                    {% set topIndex = 0 %}

                    {% for topCat in topCategories %}
                        {% if topCat.name == category %}
                            {% set isTopCategory = true %}
                            {% set topIndex = loop.index %}
                        {% endif %}
                    {% endfor %}

                    <button class="filter-pill{% if isTopCategory %} filter-pill--top{% endif %}"
                            data-category="{{ categorySlug }}"
                            data-category-name="{{ category }}"
                            {% if isTopCategory %}data-top-index="{{ topIndex }}"{% endif %}>
                        {{ category }}
                    </button>
                {% endfor %}
            </div>

            <!-- Year and Count - Simplified approach -->
            {% if books and books.length > 0 %}
                {% set currentDisplayYear = books[0].data.year or ("now" | date("Y")) %}
            {% else %}
                {% set currentDisplayYear = "now" | date("Y") %}
            {% endif %}
            {% set totalBooks = books | length %}

            <!-- Books List - Grouped by Year with Top-Level Year Display -->
            <div class="library-books">
                {% if books and books | length > 0 %}
                    {% set yearGroups = books | groupByYear %}
                    {% set sortedYears = yearGroups | keys | sort | reverse %}

                    {% for year in sortedYears %}
                        {% set yearBooks = yearGroups[year] %}

                        <!-- Year Section -->
                        <div class="year-section">
                            <h3 class="year-header">
                                {{ year }}
                                <span class="year-count-pill">{{ yearBooks | length }}</span>
                            </h3>

                            <!-- Books for this year -->
                            <div class="year-books-grid">
                                {% for book in yearBooks %}
                                <div class="book-item{% if book.data.favorite %} book-item--favorite{% endif %}"
                                     data-category="{{ book.data.category | categorySlug if book.data.category else 'uncategorized' }}"
                                     data-rating="{{ book.data.rating or 0 }}"
                                     data-year="{{ book.data.year }}"
                                     data-title="{{ book.data.title | escape }}"
                                     data-author="{{ book.data.author | escape }}"
                                     data-category-label="{{ book.data.category | escape }}"
                                     data-rating-value="{{ book.data.rating or 0 }}"
                                     data-year-label="{{ book.data.year }}"
                                     data-cover-url="{{ book.data.cover_url | escape }}"
                                     data-description="{{ book.data.description | escape }}"
                                     tabindex="0">
                                    <div class="book-main">
                                        <h4 class="book-title">{{ book.data.title or 'Untitled' }}</h4>
                                        <p class="book-author">{{ book.data.author or 'Unknown Author' }}</p>
                                        {% if book.data.description %}
                                        <p class="book-description">{{ book.data.description | striptags | truncate(200) | replace('\n', ' ') }}</p>
                                        {% endif %}
                                    </div>
                                    <div class="book-meta">
                                        {% if book.data.category %}
                                            {% set categorySlug = book.data.category | categorySlug %}
                                            {% set isTopCategory = false %}
                                            {% set topIndex = 0 %}

                                            {% for topCat in topCategories %}
                                                {% if topCat.name == book.data.category %}
                                                    {% set isTopCategory = true %}
                                                    {% set topIndex = loop.index %}
                                                {% endif %}
                                            {% endfor %}

                                            <span class="book-category{% if isTopCategory %} top-category-{{ topIndex }}{% endif %}">
                                                {{ book.data.category }}
                                            </span>
                                        {% endif %}

                                        {% if book.data.rating %}
                                        <div class="book-rating">
                                            {% for i in range(1, 6) %}
                                                <span class="star{% if i <= (book.data.rating | int) %} star--filled{% endif %}">★</span>
                                            {% endfor %}
                                        </div>
                                        {% endif %}
                                    </div>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                    {% endfor %}
                {% else %}
                    <div class="book-item">
                        <div class="book-main">
                            <h3 class="book-title">No books found</h3>
                            <p class="book-author">
                                {% if collections.library %}
                                    Collection exists but is empty ({{ collections.library | length }} items)
                                {% else %}
                                    Library collection not found. Available collections: {{ collections | keys | join(', ') }}
                                {% endif %}
                            </p>
                            <p class="book-description">Add some books to src/library/ with proper frontmatter to get started</p>
                        </div>
                    </div>
                {% endif %}
            </div>
        </div>
    </main>

    <!-- Book Detail Modal -->
    <div id="book-modal" class="book-modal" aria-modal="true" role="dialog" tabindex="-1" style="display:none;">
      <div class="book-modal__overlay" id="book-modal-overlay"></div>
      <div class="book-modal__content" role="document">
        <!-- Modal Header -->
        <div class="book-modal__header">
          <h3 class="book-modal__header-title" id="book-modal-header-title"></h3>
        <button class="book-modal__close" id="book-modal-close" aria-label="Close">&times;</button>
        </div>
        <div class="book-modal__body">
          <img class="book-modal__cover" id="book-modal-cover" src="" alt="Book cover" loading="lazy" />
          <h2 class="book-modal__title" id="book-modal-title"></h2>
          <p class="book-modal__author" id="book-modal-author"></p>
          <div class="book-modal__meta">
            <span class="book-modal__category" id="book-modal-category"></span>
            <span class="book-modal__rating" id="book-modal-rating"></span>
          </div>
          <div class="book-modal__description" id="book-modal-description"></div>
        </div>
        
        <!-- Modal Footer -->
        <div class="book-modal__footer">
          <img class="book-modal__footer-image" src="/assets/img/TransparentGradient.png" alt="Footer decoration" />
        </div>

      </div>
    </div>

    <script>
        // Enhanced Library filtering functionality - with year section support
        document.addEventListener('DOMContentLoaded', function() {
            const filterButtons = document.querySelectorAll('.filter-pill');
            const bookItems = document.querySelectorAll('.book-item');
            const yearSections = document.querySelectorAll('.year-section');

            // Count books by category for display
            const categoryCount = {};
            bookItems.forEach(book => {
                const category = book.getAttribute('data-category');
                if (category) {
                    categoryCount[category] = (categoryCount[category] || 0) + 1;
                }
            });

            // Filter functionality
            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const category = this.getAttribute('data-category');

                    // Update active filter button
                    filterButtons.forEach(btn => btn.classList.remove('filter-pill--active'));
                    this.classList.add('filter-pill--active');

                    let visibleCount = 0;

                    // Filter books and show/hide year sections
                    yearSections.forEach(section => {
                        const booksInSection = section.querySelectorAll('.book-item');
                        let visibleInSection = 0;

                        booksInSection.forEach(book => {
                            if (category === 'all' || book.getAttribute('data-category') === category) {
                                book.classList.remove('book-item--hidden');
                                book.classList.add('book-item--visible');
                                visibleInSection++;
                                visibleCount++;
                            } else {
                                book.classList.remove('book-item--visible');
                                book.classList.add('book-item--hidden');
                            }
                        });

                        // Show/hide entire year section based on visible books
                        if (visibleInSection > 0) {
                            section.style.display = 'block';
                            // Update year count pill
                            const yearCountPill = section.querySelector('.year-count-pill');
                            if (yearCountPill) {
                                if (category === 'all') {
                                    yearCountPill.textContent = `${booksInSection.length}`;
                                } else {
                                    yearCountPill.textContent = `${visibleInSection}`;
                                }
                            }
                        } else {
                            section.style.display = 'none';
                        }
                    });

                    // Update main book count display
                    const countDisplay = document.querySelector('.book-count');
                    if (countDisplay) {
                        if (category === 'all') {
                            countDisplay.textContent = `${totalBooks}`;
                        } else {
                            const categoryName = this.getAttribute('data-category-name') || category;
                            countDisplay.textContent = `${visibleCount} in ${categoryName}`;
                        }
                    }
                });
            });

            // Debug logging
            console.log('Library page loaded with', bookItems.length, 'books in', yearSections.length, 'year sections');
            console.log('Categories found:', Object.keys(categoryCount));
        });

        // Modal logic for book details
        document.addEventListener('DOMContentLoaded', function() {
          const modal = document.getElementById('book-modal');
          const modalOverlay = document.getElementById('book-modal-overlay');
          const modalClose = document.getElementById('book-modal-close');
          const modalBody = document.querySelector('.book-modal__body');
          const headerTitle = document.getElementById('book-modal-header-title');
          const cover = document.getElementById('book-modal-cover');
          const title = document.getElementById('book-modal-title');
          const author = document.getElementById('book-modal-author');
          const category = document.getElementById('book-modal-category');
          const rating = document.getElementById('book-modal-rating');
          const year = document.getElementById('book-modal-year');
          const description = document.getElementById('book-modal-description');

          function openModal(bookData) {
            cover.src = bookData.coverUrl || '';
            cover.alt = bookData.title || 'Book cover';
            title.textContent = bookData.title || '';
            author.textContent = bookData.author || '';
            
            // Set header title
            headerTitle.textContent = bookData.title || '';
            headerTitle.classList.remove('visible');
            
            // Category coloring logic
            category.textContent = bookData.category || '';
            category.className = 'book-modal__category';
            // Try to match top-category color if present on tile
            const tile = Array.from(document.querySelectorAll('.book-item')).find(el => el.getAttribute('data-title') === bookData.title);
            if (tile) {
              const catSpan = tile.querySelector('.book-category');
              if (catSpan) {
                // Copy all top-category-* classes
                catSpan.classList.forEach(cls => {
                  if (cls.startsWith('top-category-')) {
                    category.classList.add(cls);
                  }
                });
                // Copy inline style if any (for custom backgrounds)
                if (catSpan.style.background) {
                  category.style.background = catSpan.style.background;
                }
                if (catSpan.style.color) {
                  category.style.color = catSpan.style.color;
                }
                if (catSpan.style.border) {
                  category.style.border = catSpan.style.border;
                }
              }
            }
            // Render stars for rating
            let stars = '';
            for (let i = 1; i <= 5; i++) {
              let starClass = 'star';
              if (i <= (bookData.rating || 0)) {
                starClass += ' star--filled';
                if ((bookData.rating || 0) === 5) starClass += ' star--gold';
              }
              stars += `<span class=\"${starClass}\">★</span>`;
            }
            rating.innerHTML = stars;
            
            // Process description to handle line breaks
            let processedDescription = bookData.description || '';
            if (processedDescription.includes('\n')) {
                // Split by newlines and create separate <p> tags
                const paragraphs = processedDescription.split('\n').filter(p => p.trim() !== '');
                description.innerHTML = ''; // Clear existing content
                paragraphs.forEach(paragraph => {
                    const p = document.createElement('p');
                    p.textContent = paragraph.trim();
                    description.appendChild(p);
                });
            } else {
                // No line breaks, use textContent for safety
                description.textContent = processedDescription;
            }
            
            modal.style.display = 'block';
            setTimeout(() => { modal.classList.add('open'); }, 10);
            document.body.style.overflow = 'hidden';
          }

          function closeModal() {
            modal.classList.remove('open');
            setTimeout(() => { modal.style.display = 'none'; }, 200);
            document.body.style.overflow = '';
            // Reset header title
            headerTitle.classList.remove('visible');
          }

          // Scroll detection for header title
          function handleModalScroll() {
            if (modalBody) {
              const scrollTop = modalBody.scrollTop;
              const coverTop = cover.offsetTop;
              const headerHeight = 60; // Approximate header height
              
              // Show title when cover is scrolled out of view
              if (scrollTop > coverTop - headerHeight) {
                headerTitle.classList.add('visible');
              } else {
                headerTitle.classList.remove('visible');
              }
            }
          }

          // Add scroll event listener to modal body
          if (modalBody) {
            modalBody.addEventListener('scroll', handleModalScroll);
          }

          document.querySelectorAll('.book-item').forEach(item => {
            item.addEventListener('click', function() {
              openModal({
                coverUrl: this.getAttribute('data-cover-url'),
                title: this.getAttribute('data-title'),
                author: this.getAttribute('data-author'),
                category: this.getAttribute('data-category-label'),
                rating: parseInt(this.getAttribute('data-rating-value'), 10) || 0,
                year: this.getAttribute('data-year-label'),
                description: this.getAttribute('data-description')
              });
            });
            item.addEventListener('keydown', function(e) {
              if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
              }
            });
          });

          modalClose.addEventListener('click', closeModal);
          modalOverlay.addEventListener('click', closeModal);
          document.addEventListener('keydown', function(e) {
            if (modal.style.display === 'block' && (e.key === 'Escape' || e.key === 'Esc')) {
              closeModal();
            }
          });
        });
    </script>
</body>
</html>